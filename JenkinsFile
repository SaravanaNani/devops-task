pipeline {
    agent {
        docker {
            image 'saravana2002/jenkins-agent:latest'
            args '-u root:root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    parameters {
        choice(
            name: 'TERRAFORM_ACTION',
            choices: ['apply', 'destroy', 'skip'],
            description: 'Choose Terraform action'
        )
    }

    environment {
        AWS_DEFAULT_REGION = "ap-south-1"
        TF_WORKDIR = "terraform"
        DOCKER_IMAGE = "saravana2002/devops-task:latest"
        CLUSTER_NAME = "devops-task-cluster"
        SERVICE_NAME = "devops-task-service"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/SaravanaNani/devops-task.git'
            }
        }

        stage('Build & Test') {
            steps {
                echo "Installing dependencies and running unit tests..."
                sh 'npm install'
                sh 'npm test'
            }
        }

        stage('Terraform') {
            steps {
                dir("${TF_WORKDIR}") {
                    script {
                        if (params.TERRAFORM_ACTION == 'skip') {
                            echo "Skipping Terraform stage."
                        } else {
                            sh 'terraform init'

                            if (params.TERRAFORM_ACTION == 'apply') {
                                // Automatically inject image_tag = latest
                                sh "terraform plan -var 'image_tag=latest' -out=tfplan"

                                def planOutput = sh(
                                    script: "terraform show -json tfplan | grep -q 'resource_changes' && echo 'changes' || echo 'no_changes'",
                                    returnStdout: true
                                ).trim()

                                if (planOutput == "changes") {
                                    input message: "Terraform wants to create/update resources. Proceed?", ok: "Yes, Apply"
                                    sh "terraform apply -auto-approve tfplan"
                                } else {
                                    echo "No infra changes detected. Skipping apply."
                                }
                            } else if (params.TERRAFORM_ACTION == 'destroy') {
                                input message: "Are you sure you want to DESTROY all infra?", ok: "Yes, Destroy"
                                sh "terraform destroy -auto-approve"
                            }
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            when { expression { params.TERRAFORM_ACTION != 'destroy' } }
            steps {
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Push to DockerHub') {
            when { expression { params.TERRAFORM_ACTION != 'destroy' } }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'dockerhub-creds',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Deploy to ECS') {
            when { expression { params.TERRAFORM_ACTION != 'destroy' } }
            steps {
                echo "Updating ECS service..."
                sh """
                    aws ecs update-service \
                        --cluster ${env.CLUSTER_NAME} \
                        --service ${env.SERVICE_NAME} \
                        --force-new-deployment
                """
            }
        }

        stage('Fetch ALB DNS') {
            when { expression { params.TERRAFORM_ACTION != 'destroy' } }
            steps {
                script {
                    def alb_dns = sh(
                        script: "terraform output -raw alb_dns",
                        returnStdout: true
                    ).trim()
                    echo "Application is accessible at: http://${alb_dns}"
                    currentBuild.description = "ALB URL: http://${alb_dns}"
                }
            }
        }
    }

    post {
        success { echo "Pipeline completed successfully ✅" }
        failure { echo "Pipeline failed ❌" }
    }
}
