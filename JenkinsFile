pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = "saravana2002/devops-task"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        AWS_DEFAULT_REGION = "ap-south-1"
        CLUSTER_NAME = "adq-ecs-cluster"
        SERVICE_NAME = "adq-service"
        TASK_FAMILY = "adq-task"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/SaravanaNani/devops-task.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_HUB_REPO}:${IMAGE_TAG} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                    echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin
                    docker push ${DOCKER_HUB_REPO}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Update ECS Task Definition') {
            steps {
                script {
                    // Get the latest task definition JSON
                    def taskDef = sh (
                        script: "aws ecs describe-task-definition --task-definition ${TASK_FAMILY} --region ${AWS_DEFAULT_REGION}",
                        returnStdout: true
                    ).trim()

                    // Replace the container image with new Docker image
                    writeFile file: 'taskdef.json', text: taskDef.replaceFirst(
                        /"image":\\s*".*?"/,
                        "\"image\":\"${DOCKER_HUB_REPO}:${IMAGE_TAG}\""
                    )
                }
            }
        }

        stage('Register New Task Definition') {
            steps {
                sh """
                aws ecs register-task-definition \
                    --cli-input-json file://taskdef.json \
                    --region ${AWS_DEFAULT_REGION}
                """
            }
        }

        stage('Deploy to ECS') {
            steps {
                sh """
                aws ecs update-service \
                    --cluster ${CLUSTER_NAME} \
                    --service ${SERVICE_NAME} \
                    --force-new-deployment \
                    --region ${AWS_DEFAULT_REGION}
                """
            }
        }
    }

    post {
        success {
            echo "✅ Deployment successful: ${DOCKER_HUB_REPO}:${IMAGE_TAG}"
        }
        failure {
            echo "❌ Deployment failed. Check logs."
        }
    }
}
