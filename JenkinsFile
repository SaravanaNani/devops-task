pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = "ap-south-1"
        TF_WORKDIR = "terraform" 
        DOCKER_IMAGE = "saravana2002/myapp:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/SaravanaNani/devops-task.git'
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${TF_WORKDIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${TF_WORKDIR}") {
                    sh 'terraform plan -out=tfplan > tfplan.log || true'
                }
            }
        }

        stage('Approve Infra Creation?') {
            steps {
                script {
                    // Check if there are changes
                    def changes = sh(script: "grep -q 'No changes. Infrastructure is up-to-date.' ${TF_WORKDIR}/tfplan.log || echo 'changes'", returnStdout: true).trim()
                    
                    if (changes == "changes") {
                        input message: "Terraform wants to create/update resources. Proceed with apply?", ok: "Yes, Apply"
                    } else {
                        echo "No infra changes detected. Skipping apply."
                        currentBuild.description = "Skipped Terraform apply (infra up-to-date)"
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression {
                    sh(script: "grep -q 'No changes. Infrastructure is up-to-date.' ${TF_WORKDIR}/tfplan.log && echo false || echo true", returnStdout: true).trim() == "true"
                }
            }
            steps {
                dir("${TF_WORKDIR}") {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                sh """
                    aws ecs update-service \
                        --cluster ${env.CLUSTER_NAME} \
                        --service ${env.SERVICE_NAME} \
                        --force-new-deployment
                """
            }
        }
    }
}
